//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Controle/ActionsSousMarinV1.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ActionsSousMarinV1: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ActionsSousMarinV1()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ActionsSousMarinV1"",
    ""maps"": [
        {
            ""name"": ""Personnage"",
            ""id"": ""8758f553-bd8e-439f-be12-34a9d273182f"",
            ""actions"": [
                {
                    ""name"": ""Nager"",
                    ""type"": ""Value"",
                    ""id"": ""1ed262e1-f0ab-458e-9a32-de36259f8cfe"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""660e1c86-0485-4767-8a7f-47fba1e72646"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Nager"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f29e69f3-d941-4251-8a56-0880a81d26a4"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Nager"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7affe838-dc45-4abc-aee1-2a55d7ace319"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Nager"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""abdc09fa-2a85-4c8c-bb8f-46f014528a2e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Nager"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""0d37340f-1b54-4e3c-a939-67620a77efa3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Nager"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Personnage
        m_Personnage = asset.FindActionMap("Personnage", throwIfNotFound: true);
        m_Personnage_Nager = m_Personnage.FindAction("Nager", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Personnage
    private readonly InputActionMap m_Personnage;
    private List<IPersonnageActions> m_PersonnageActionsCallbackInterfaces = new List<IPersonnageActions>();
    private readonly InputAction m_Personnage_Nager;
    public struct PersonnageActions
    {
        private @ActionsSousMarinV1 m_Wrapper;
        public PersonnageActions(@ActionsSousMarinV1 wrapper) { m_Wrapper = wrapper; }
        public InputAction @Nager => m_Wrapper.m_Personnage_Nager;
        public InputActionMap Get() { return m_Wrapper.m_Personnage; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PersonnageActions set) { return set.Get(); }
        public void AddCallbacks(IPersonnageActions instance)
        {
            if (instance == null || m_Wrapper.m_PersonnageActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PersonnageActionsCallbackInterfaces.Add(instance);
            @Nager.started += instance.OnNager;
            @Nager.performed += instance.OnNager;
            @Nager.canceled += instance.OnNager;
        }

        private void UnregisterCallbacks(IPersonnageActions instance)
        {
            @Nager.started -= instance.OnNager;
            @Nager.performed -= instance.OnNager;
            @Nager.canceled -= instance.OnNager;
        }

        public void RemoveCallbacks(IPersonnageActions instance)
        {
            if (m_Wrapper.m_PersonnageActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPersonnageActions instance)
        {
            foreach (var item in m_Wrapper.m_PersonnageActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PersonnageActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PersonnageActions @Personnage => new PersonnageActions(this);
    public interface IPersonnageActions
    {
        void OnNager(InputAction.CallbackContext context);
    }
}
